import io
import json
import os
import requests

def get_temperature(place: str, token: str) -> str:
    url = "https://api.openweathermap.org/data/2.5/weather"
    parameters = {"q": place, "appid": token, "lang": "ru", "units": "metric"}
    response = requests.get(url=url, params=parameters).json()
    if response.get("cod") != 200:
        return None
    temperature = response["main"]["temp"]
    return f"The temperature in {place} is {temperature}°C."

def get_temperature_by_coords(lat: float, lon: float, token: str) -> str:
    url = "https://api.openweathermap.org/data/2.5/weather"
    parameters = {"lat": lat, "lon": lon, "appid": token, "lang": "ru", "units": "metric"}
    response = requests.get(url=url, params=parameters).json()
    if response.get("cod") != 200:
        return None
    temperature = response["main"]["temp"]
    return f"The temperature at your location is {temperature}°C."

def send_message(text: str, chat_id: str, message_id: str, token: str):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    parameters = {"chat_id": chat_id, "text": text, "reply_to_message_id": message_id}
    requests.post(url=url, json=parameters)

def send_voice(voice: bytes, chat_id: str, message_id: str, token: str):
    voice_file = io.BytesIO(voice)
    url = f"https://api.telegram.org/bot{token}/sendVoice"
    parameters = {"chat_id": chat_id, "reply_to_message_id": message_id}
    requests.post(url=url, data=parameters, files={"voice": voice_file})

def download_file(file_id: str, token: str) -> bytes:
    url = f"https://api.telegram.org/bot{token}/getFile"
    parameters = {"file_id": file_id}
    response = requests.post(url=url, json=parameters).json()
    file = response["result"]
    file_path = file["file_path"]
    download_url = f"https://api.telegram.org/file/bot{token}/{file_path}"
    download_response = requests.get(url=download_url)
    file_content = download_response.content
    return file_content

def stt(voice: bytes, token: str) -> str:
    url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
    auth = {"Authorization": f"Bearer {token}"}
    response = requests.post(url=url, headers=auth, data=voice).json()
    return response.get("result", "")

def tts(text: str, token: str) -> bytes:
    url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
    params = {"text": text, "voice": "ermil", "emotion": "good"}
    auth = {"Authorization": f"Bearer {token}"}
    yc_tts_response = requests.post(url=url, data=params, headers=auth)
    return yc_tts_response.content

def handler(event, context):
    yc_function_response = {'statusCode': 200, 'body': ''}
    tg_token = os.environ.get("TELEGRAM_BOT_TOKEN")
    ow_token = os.environ.get("WEATHER_TOKEN")
    yc_token = context.token["access_token"]
    update = json.loads(event['body'])
    
    if 'message' not in update:
        return yc_function_response
    
    message = update['message']
    message_id = message["message_id"]
    chat_id = message["chat"]["id"]

    if "text" in message:
        text = message["text"].strip().lower()

        if text == "/start" or text == "/help":
            help_text = ("I can tell you the current weather for a specified location.\n\n"
                         "I can respond to:\n"
                         "- Text messages with the name of the location.\n"
                         "- Voice messages with the name of the location.\n"
                         "- Messages with geolocation.")
            send_message(text=help_text, chat_id=chat_id, message_id=message_id, token=tg_token)
        else:
            temperature = get_temperature(place=text, token=ow_token)
            if temperature:
                send_message(text=temperature, chat_id=chat_id, message_id=message_id, token=tg_token)
            else:
                send_message(text=f"I could not find the location \"{text}\".", chat_id=chat_id, message_id=message_id, token=tg_token)
        return yc_function_response

    if "voice" in message:
        voice = message["voice"]

        if voice["duration"] > 30:
            error_text = "The voice message must be shorter than 30 seconds."
            send_message(text=error_text, chat_id=chat_id, message_id=message_id, token=tg_token)
            return yc_function_response

        voice_content = download_file(file_id=voice["file_id"], token=tg_token)
        place = stt(voice=voice_content, token=yc_token)
        temperature = get_temperature(place=place, token=ow_token)
        if temperature:
            yc_tts_voice = tts(text=temperature, token=yc_token)
            send_voice(voice=yc_tts_voice, message_id=message_id, chat_id=chat_id, token=tg_token)
        else:
            send_message(text=f"I could not find the location \"{place}\".", chat_id=chat_id, message_id=message_id, token=tg_token)
        return yc_function_response

    if "location" in message:
        location = message["location"]
        temperature = get_temperature_by_coords(lat=location["latitude"], lon=location["longitude"], token=ow_token)
        if temperature:
            send_message(text=temperature, chat_id=chat_id, message_id=message_id, token=tg_token)
        else:
            send_message(text="I could not get the weather for your location.", chat_id=chat_id, message_id=message_id, token=tg_token)
        return yc_function_response

    error_text = ("I can only respond to text or voice messages with the name of the location or geolocation messages.\n"
                  "Use /start or /help for more information.")
    send_message(text=error_text, chat_id=chat_id, message_id=message_id, token=tg_token)
    return yc_function_response
